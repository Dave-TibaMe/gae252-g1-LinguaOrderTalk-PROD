# GCP Cloud Run Console 設定完整步驟

## 🎯 前置準備

### 1. 確認 GCP 帳號與專案
- 確保您有 GCP 帳號並已登入
- 確認有有效的付費帳號 (Cloud Run 需要啟用付費)
- 記下您的專案 ID

## 📋 步驟一：啟用必要的 API 服務

### 1.1 進入 API 與服務頁面
1. 在 GCP Console 左側選單點擊 **"API 與服務"** → **"程式庫"**
2. 或直接前往：https://console.cloud.google.com/apis/library

### 1.2 啟用以下 API (逐一搜尋並啟用)
搜尋並點擊每個 API，然後點擊 **"啟用"**：

- ✅ **Cloud Run API**
- ✅ **Cloud Build API** 
- ✅ **Artifact Registry API**
- ✅ **Cloud Translation API**
- ✅ **Cloud Speech-to-Text API**
- ✅ **Cloud SQL Admin API** (如果使用 Cloud SQL)
- ✅ **Maps JavaScript API** (如果需要)

## 📦 步驟二：建立 Artifact Registry 儲存庫

### 2.1 進入 Artifact Registry
1. 左側選單點擊 **"Artifact Registry"** → **"儲存庫"**
2. 或前往：https://console.cloud.google.com/artifacts

### 2.2 建立新儲存庫
1. 點擊 **"建立儲存庫"**
2. 填入以下資訊：
   - **名稱**: `peter-repo`
   - **格式**: `Docker`
   - **位置類型**: `地區`
   - **地區**: `asia-east1 (台灣)`
   - **描述**: `Peter app container images`
3. 點擊 **"建立"**

## 🔐 步驟三：建立服務帳號

### 3.1 進入 IAM 頁面
1. 左側選單點擊 **"IAM 與管理"** → **"服務帳號"**
2. 或前往：https://console.cloud.google.com/iam-admin/serviceaccounts

### 3.2 建立新服務帳號
1. 點擊 **"建立服務帳號"**
2. 填入資訊：
   - **服務帳號名稱**: `peter-deployment-sa`
   - **服務帳號 ID**: `peter-deployment-sa` (自動產生)
   - **描述**: `Service account for Peter app deployment`
3. 點擊 **"建立並繼續"**

### 3.3 授予角色權限
在 "將此服務帳號的存取權授予專案" 區段，新增以下角色：
- `Cloud Run 管理員` (Cloud Run Admin)
- `Artifact Registry 寫入者` (Artifact Registry Writer)
- `儲存空間管理員` (Storage Admin)

點擊 **"繼續"** → **"完成"**

### 3.4 建立服務帳號金鑰
1. 在服務帳號列表中，點擊剛建立的 `peter-deployment-sa`
2. 切換到 **"金鑰"** 分頁
3. 點擊 **"新增金鑰"** → **"建立新金鑰"**
4. 選擇 **"JSON"** 格式
5. 點擊 **"建立"** 並下載 JSON 檔案
6. **妥善保存此檔案，稍後需要用於 GitHub Secrets**

## 🗄️ 步驟四：設定資料庫 (選擇其一)

### 選項 A：使用 Cloud SQL (推薦)

#### 4.1 建立 Cloud SQL 實例
1. 左側選單點擊 **"SQL"**
2. 點擊 **"建立實例"**
3. 選擇 **"MySQL"**
4. 設定：
   - **實例 ID**: `peter-mysql-instance`
   - **密碼**: 設定 root 密碼
   - **地區**: `asia-east1`
   - **區域**: `asia-east1-a`
   - **機器類型**: `db-f1-micro` (開發用) 或 `db-n1-standard-1` (生產用)
5. 點擊 **"建立"**

#### 4.2 建立資料庫和使用者
1. 實例建立完成後，點擊實例名稱進入詳細頁面
2. 在 **"資料庫"** 分頁，點擊 **"建立資料庫"**：
   - **資料庫名稱**: `linguaordertalk`
3. 在 **"使用者"** 分頁，點擊 **"新增使用者帳戶"**：
   - **使用者名稱**: `peter`
   - **密碼**: 設定密碼
   - **主機**: `%` (允許任何主機連線)

#### 4.3 取得連線資訊
1. 在實例概觀頁面，複製 **"公用 IP 位址"**
2. 您的 DATABASE_URL 格式：
   ```
   mysql+aiomysql://peter:YOUR_PASSWORD@PUBLIC_IP:3306/linguaordertalk
   ```

### 選項 B：使用外部資料庫
如果您有現有的 MySQL 資料庫，直接使用該連線資訊即可。

## 🚀 步驟五：手動部署到 Cloud Run

### 5.1 上傳容器映像

#### 方法一：使用 Cloud Shell (推薦)
1. 在 GCP Console 右上角點擊 **"啟用 Cloud Shell"** 圖示
2. 在 Cloud Shell 中執行：

```bash
# 設定專案 ID
export PROJECT_ID="your-project-id"
gcloud config set project $PROJECT_ID

# 複製您的專案代碼到 Cloud Shell (可使用 git clone 或上傳)
git clone https://github.com/your-username/your-repo.git
cd your-repo/deployment/Peter

# 建置並推送映像
docker build -t asia-east1-docker.pkg.dev/$PROJECT_ID/peter-repo/peter-linguaordertalk:v1 .
docker push asia-east1-docker.pkg.dev/$PROJECT_ID/peter-repo/peter-linguaordertalk:v1
```

#### 方法二：本地上傳
```bash
# 在本地電腦，先認證
gcloud auth login
gcloud config set project YOUR_PROJECT_ID
gcloud auth configure-docker asia-east1-docker.pkg.dev

# 建置並推送
cd deployment/Peter
docker build -t asia-east1-docker.pkg.dev/YOUR_PROJECT_ID/peter-repo/peter-linguaordertalk:v1 .
docker push asia-east1-docker.pkg.dev/YOUR_PROJECT_ID/peter-repo/peter-linguaordertalk:v1
```

### 5.2 建立 Cloud Run 服務

1. 左側選單點擊 **"Cloud Run"**
2. 點擊 **"建立服務"**
3. 填入設定：

#### 基本設定
- **容器映像檔 URL**: 點擊 **"選取"**，在 Artifact Registry 中選擇剛上傳的映像
- **服務名稱**: `peter-linguaordertalk`
- **地區**: `asia-east1 (台灣)`

#### 流量配置
- ✅ **允許未經驗證的叫用** (因為需要接收 LINE webhook)

#### 進階設定 (點擊 "容器、變數、連線、安全性")

##### 容器分頁：
- **容器通訊埠**: `8080`
- **記憶體**: `1 GiB`
- **CPU**: `1`

##### 變數與密碼分頁：
點擊 **"新增變數"** 逐一新增：

| 變數名稱 | 值 |
|---------|-----|
| `CHANNEL_ACCESS_TOKEN` | 您的 LINE Channel Access Token |
| `CHANNEL_SECRET` | 您的 LINE Channel Secret |
| `LIFF_ID` | 您的 LIFF ID |
| `Maps_API_KEY` | 您的 Google Maps API Key |
| `DATABASE_URL` | 您的資料庫連線字串 |

##### 連線分頁：
- **最大實例數量**: `10`
- **最小實例數量**: `0`
- **並行要求數上限**: `100`
- **要求逾時**: `300` 秒

4. 點擊 **"建立"**

## 🔗 步驟六：設定 LINE Bot Webhook

### 6.1 取得 Cloud Run URL
1. 部署完成後，在 Cloud Run 服務頁面複製服務 URL
2. URL 格式類似：`https://peter-linguaordertalk-[hash]-de.a.run.app`

### 6.2 設定 LINE Webhook URL
1. 前往 [LINE Developers Console](https://developers.line.biz/)
2. 選擇您的 Bot Channel
3. 在 **"Messaging API"** 分頁中：
   - **Webhook URL**: `https://your-cloud-run-url/callback`
   - 啟用 **"Use webhook"**
4. 點擊 **"Verify"** 測試連線

## 🧪 步驟七：測試部署

### 7.1 健康檢查
在瀏覽器開啟：`https://your-cloud-run-url/health`
應該會看到類似以下回應：
```json
{
  "status": "healthy",
  "timestamp": "2025-01-XX...",
  "service": "LinguaOrderTalk Bot",
  "database": "connected"
}
```

### 7.2 測試 LINE Bot 功能
1. 用手機掃描 LINE Bot QR Code 加入好友
2. 測試基本功能：
   - 傳送訊息 "Change Language"
   - 傳送訊息 "Order Now"
   - 測試語音辨識和位置分享

## 📊 步驟八：監控與日誌

### 8.1 查看服務日誌
1. 在 Cloud Run 服務頁面，點擊 **"日誌"** 分頁
2. 或前往 **"Logging"** → **"日誌瀏覽器"**

### 8.2 設定監控警報 (可選)
1. 前往 **"Monitoring"** → **"Alerting"**
2. 建立警報原則監控：
   - 服務回應時間
   - 錯誤率
   - 記憶體使用量

## 🔄 後續更新與維護

### 方法一：自動化 (推薦)
設定 GitHub Actions 後，只需推送代碼即可自動部署

### 方法二：手動更新
1. 建置新的容器映像 (使用新的標籤，如 v2, v3...)
2. 在 Cloud Run 服務頁面點擊 **"編輯並部署新修訂版本"**
3. 選擇新的容器映像
4. 點擊 **"部署"**

## 🛡️ 安全性最佳實務

### 環境變數安全
- 敏感資料使用 **Secret Manager** 而非環境變數 (進階設定)
- 定期輪換 API 金鑰

### 網路安全
- 考慮使用 **VPC 連接器** 連接私有網路
- 設定適當的 **IAM 權限**

### 資料庫安全
- 啟用 **SSL 連線**
- 使用 **授權網路** 限制存取來源
- 定期備份資料

## 📞 故障排除

### 常見錯誤及解決方案

#### 部署失敗
**錯誤**: "Image not found"
**解決**: 確認映像已成功推送到 Artifact Registry

**錯誤**: "Port 8080 not accessible"
**解決**: 檢查 Dockerfile 中的 EXPOSE 8080 和應用程式監聽埠

#### 應用程式錯誤
**錯誤**: "Database connection failed"
**解決**: 檢查 DATABASE_URL 環境變數和網路連線

**錯誤**: "LINE webhook verification failed"
**解決**: 檢查 CHANNEL_SECRET 環境變數

### 偵錯工具
```bash
# 在 Cloud Shell 中查看即時日誌
gcloud run services logs tail peter-linguaordertalk --region=asia-east1

# 查看服務詳細資訊
gcloud run services describe peter-linguaordertalk --region=asia-east1
```

## 💰 成本優化建議

### 資源配置建議
- **開發環境**: 512Mi 記憶體, 0.5 CPU
- **生產環境**: 1Gi 記憶體, 1 CPU
- **最小實例數**: 0 (按需求擴展)
- **最大實例數**: 5-10 (根據流量調整)

### 監控成本
1. 前往 **"帳單"** → **"預算與快訊"**
2. 建立預算警報避免超支

這個設定完成後，您的 Peter App 就能在 Cloud Run 上穩定運行，並自動處理 LINE Bot 的所有請求！